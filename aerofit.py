# -*- coding: utf-8 -*-
"""Aerofit

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aIzAlQ89bCUU5Pb3mH_QQmBpNN_KnEjx
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

!gdown https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/001/125/original/aerofit_treadmill.csv?1639992749

df=pd.read_csv("https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/001/125/original/aerofit_treadmill.csv?1639992749")

df

df.shape

df.isna().sum()

df.info()

fig=plt.figure(figsize=(15,10))
plt.subplot(1,3,1)
box_plot =sns.boxplot(x=df["Product"],y=df["Income"])
medians = df.groupby(['Product'])['Income'].median()
vertical_offset = df['Income'].median()*0.0005 # offset from median for display

for xtick in box_plot.get_xticks():
    box_plot.text(xtick,medians[xtick] + vertical_offset,medians[xtick], 
            horizontalalignment='center',size=15,color='black',weight='semibold')
plt.title("Product vs Income")

plt.subplot(1,3,2)
box_plot1=sns.boxplot(x=df["Product"],y=df["Age"])
medians = df.groupby(['Product'])['Age'].median()
vertical_offset = df['Age'].median() * 0.00005 # offset from median for display

for xtick in box_plot1.get_xticks():
    box_plot1.text(xtick,medians[xtick] + vertical_offset,medians[xtick], 
            horizontalalignment='center',size=15,color='black',weight='semibold')
plt.title("Product vs Age")

plt.subplot(1,3,3)
box_plot2=sns.boxplot(x=df["Product"],y=df["Fitness"])
medians = df.groupby(['Product'])['Fitness'].median()
vertical_offset = df['Fitness'].median() *0.05 # offset from median for display

for xtick in box_plot2.get_xticks():
    box_plot2.text(xtick,medians[xtick] - vertical_offset,medians[xtick], 
            horizontalalignment='center',size=15,color='black',weight='semibold')
plt.title("Product vs Fitness")
plt.subplots_adjust(hspace=5)
fig.suptitle("Outlier Detection",size=20)
plt.show()

df.groupby("Product")[["Income","Age","Fitness"]].describe()

male_female=df.groupby(["Gender"])["Product"].count().to_frame().reset_index().rename(columns={"Product":"number Of Person"})
male_female

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plots=sns.countplot(x=df["Gender"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.title('Male vs Female total number')

plt.subplot(1,2,2)

plt.pie(x=df['Gender'].value_counts(),
 colors=['Green','Blue'],
 labels=['Male','Female'],
 autopct='%1.2f%%',
 startangle=90,
 explode=[0.1,0],
 shadow=True)
plt.title('Male vs Female (%)')
plt.legend(loc="upper right")
plt.subplots_adjust(hspace=5)
plt.show()

"""There are 57.78% male customer for the Aerofit"""

mat_stat_person=df.groupby(["Gender","MaritalStatus"])["Product"].count().to_frame().sort_values(by=["Gender","Product"],ascending=[False,False]).reset_index().rename(columns={"Product":"Number Of Person"})
mat_stat_person_pivot=pd.pivot(mat_stat_person,index=["MaritalStatus"],columns="Gender",values="Number Of Person").reset_index()
mat_stat_person_pivot.columns.name=None

mat_stat_person_pivot

pd.crosstab(index=df["MaritalStatus"], columns=df["Gender"], margins=True)

prob_Partnered_given_male=len(df[(df["MaritalStatus"]=="Partnered")&(df["Gender"]=="Male")])/len(df[df["Gender"]=="Male"])
prob_Partnered_given_male

prob_Partnered_given_male=len(df[(df["MaritalStatus"]=="Single")&(df["Gender"]=="Male")])/len(df[df["Gender"]=="Male"])
prob_Partnered_given_male

"""There was higher probability(61/107=0.58) that a male customer whose material status is Partner to being a customer of Aerofit
but there are equally likely case of women being the customer as the probality for womens material status is Partner is (46/107=0.42)
 womens material status is single(30/73=0.43)
"""

plots=sns.barplot(x=mat_stat_person["Gender"],y=mat_stat_person["Number Of Person"],hue=mat_stat_person["MaritalStatus"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.show()

catagory_wise_num_product=df.groupby("Product")["Age"].count().to_frame().reset_index().rename(columns={"Age":"total product"})
catagory_wise_num_product

plt.figure(figsize=(15,6))
plt.subplot(1,2,1)
plots=sns.countplot(x=df["Product"])
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.title('Catagory wise Product')

plt.subplot(1,2,2)

plt.pie(x=df['Product'].value_counts(),
 colors=['Green','orange','Blue'],
 labels=['KP281','KP481','KP781'],
 autopct='%1.2f%%',
 startangle=90,
 explode=[0.1,0.1,0.1],
 shadow=True)
plt.title('Catagory wise Product (%)')
plt.legend(loc="upper left")
plt.subplots_adjust(hspace=5)
plt.show()

"""kp281 has the height market shear which is around 44.44%"""

raw_df=df.copy()

def age(row):
  if row["Age"]<=12:
    return "Child user"
  elif row["Age"]>12 and  row["Age"]<=18:
    return "Teenager user"
  elif row["Age"]>18 and  row["Age"]<=30:
    return "Middle age user"
  elif row["Age"]>30 and  row["Age"]<=50:
    return "Adult user"
  else:
    return "Senior citizen user"
raw_df["Age Group"]=raw_df.apply(age, axis=1)

prodt_age_grp=raw_df.groupby(["Product","Age Group"])["Age"].count().to_frame().reset_index().rename(columns={"Age":"User"})
prodt_age_grp_pivot=pd.pivot(prodt_age_grp,index=["Product"],columns="Age Group",values="User").fillna(0).reset_index()
prodt_age_grp_pivot.columns.name=None 
prodt_age_grp_pivot

"""for kp281 middle age(30 to 50 age group people) user is heighest followed by adult aged people(18 to 30  age group people)

for kp481 middle age(18 to 30 age group people) user is heighest followed by adult aged people(30 to 50 age group people)

kp781 are most suited for the mid aged user(18 to 30  age group people)

for teen  (12 to 18  age group people) kp281 is the best one to buy
"""

pd.crosstab(index=raw_df["Age Group"], columns=raw_df["Product"], margins=True)

prob_raw_dfs_given_kp781=len(raw_df[(raw_df["Age Group"]=="Middle age user")&(raw_df["Product"]=="KP781")])/len(raw_df[raw_df["Age Group"]=="Middle age user"])
prob_raw_dfs_given_kp781

"""The probabilaty of buying kp781 by mid age (30 to 50 age group people) 
is (30/119=.025)
"""

plt.figure(figsize=(8,6))
plots=sns.barplot(data=prodt_age_grp,x="Product",y="User",hue="Age Group")
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')

ax=sns.distplot(df["Age"],bins=9)
data_x, data_y = ax.lines[0].get_data()

xi = 24.5 # coordinate where to find the value of kde curve
yi = np.interp(xi,data_x, data_y)
print ("x={},y={}".format(xi, yi)) # prints x=0,y=0.3698
ax.plot([xi],[yi], marker="o")
plt.show()

for col in ['Age', 'Income', 'Miles']:  
    sns.distplot(df[col])

    plt.title(f'{col} Distribution')
    plt.show()

    plt.figure(figsize=(5,4))
    kp281 = df[df['Product']=='KP281']
    kp481 = df[df['Product']=='KP481']
    kp781 = df[df['Product']=='KP781']
    sns.distplot(kp281[col])
    sns.distplot(kp481[col])
    sns.distplot(kp781[col])
    plt.legend(['KP281', 'KP481', 'KP781'])
    plt.title(f'{col} distribution on product')
    plt.show()

user_Marital=df.groupby(["Product","Gender","MaritalStatus"])["Age"].count().to_frame().reset_index().rename(columns={"Age":"User"})
user_Marital_pivot=pd.pivot(user_Marital,index=["Product","Gender"],columns="MaritalStatus",values="User").sort_values(by="Gender").reset_index()
user_Marital_pivot.columns.name=None

user_Marital_pivot

sns.pairplot(data=user_Marital_pivot,hue="Gender")
plt.show()

user_Marital1=df.groupby(["Product","MaritalStatus"])["Age"].count().to_frame().reset_index().rename(columns={"Age":"User"})
plt.figure(figsize=(8,6))
plots=sns.barplot(data=user_Marital1,x="Product",y="User",hue="MaritalStatus")
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')

"""there are more number of material satus partner for all the catagory compair to single ones"""

pd.crosstab(index=df["MaritalStatus"], columns=df["Product"], margins=True)

"""the probability of buying trade mill for material status partner is(107/180=0.59)

the probability of material status partner to buy kp781 is (23/107=0.217)
"""

prob_MaritalStatus_given_kp781=len(df[(df["MaritalStatus"]=="Partnered")&(df["Product"]=="KP781")])/len(df[df["MaritalStatus"]=="Partnered"])
prob_MaritalStatus_given_kp781

df_income=df.copy()
def income(row):
  if row["Income"]<50000:
    return "Low income"
  elif row["Income"]>=50000 and row["Income"]<75000:
    return "Middle income"
  else:
    return "High income"
df_income["Income catagory"]=df_income.apply(income,axis=1)

df_income_cat=df_income.groupby(["Product","Income catagory"])["Age"].count().to_frame().reset_index().rename(columns={"Age":"User"})
df_income_cat_pivot=pd.pivot(df_income_cat,index=["Product"],columns="Income catagory",values="User").fillna(0).reset_index()
df_income_cat_pivot.columns.name=None

df_income_cat_pivot[["Product","Low income","Middle income","High income"]]

df_income_cat

plots=sns.barplot(data=df_income_cat,x="Income catagory",y="User",hue="Product")
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.legend(loc=(0.75,0.75))
plt.show()

"""customer having high income(>75000$) are the most fited customer group for kp781

customer having low income(<50000$) are the most fited customer group for kp281

customer having midium income (50000$ to 75000$) are most suited for kp481

"""

pd.crosstab(index=df_income["Income catagory"], columns=df["Product"], margins=True)

prob_High_income_given_kp781=len(df_income[(df_income["Income catagory"]=="High income")&(df_income["Product"]=="KP781")])/len(df_income[df_income["Product"]=="KP781"])
prob_High_income_given_kp781

"""the are higher probability of(83/180=0.46) low income(<50000$) people

the chance of buying kp781 by  higher income people is (21/40=0.525)
"""

df_fit=df.copy()

def fit(row):
  if row["Fitness"]==5:
    return "Fitness feek user"
  elif  row["Fitness"]<=4 and row["Fitness"]>=3:
    return "Regular user"
  else:
    return "Irregular user"
df_fit["Fitness catagory"]=df_fit.apply(fit,axis=1)

df_fit_cat=df_fit.groupby(["Product",'Fitness catagory'])["Age"].count().to_frame().reset_index().rename(columns={"Age":"User"})
df_fit_cat_pivot=pd.pivot(df_fit_cat,index=["Product"],columns="Fitness catagory",values="User").fillna(0).reset_index()
df_fit_cat_pivot.columns.name=None

df_fit_cat_pivot

plots=sns.barplot(data=df_fit_cat,x="Fitness catagory",y="User",hue="Product")
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.legend(loc=(0.1,0.75))
plt.show()

pd.crosstab(index=df_fit["Fitness catagory"], columns=df_fit["Product"], margins=True)

"""for regular user (finess of group 3 to 4) kp281,and kp481 is best one

for fitness feek(finess of group 4 to5) kp781 is the best one

the probability of buying kp781 by fitnessfeek is (29/40=0.725)

the probability of buying kp281 by regular user is (63/80=0.78) which is equally likly to the probability of buying kp281 by regular user is (47/60=0.78)
"""

df_usage=df.copy()
def usage(row):
  if row["Usage"]<3:
    return "Irregular user"
  elif  row["Usage"]<=5 and row["Usage"]>=3:
    return "Modarate user"
  else:
    return "Regular user"

df_usage["Usage catagory"]=df_usage.apply(usage,axis=1)

df_usage_cat=df_usage.groupby(["Product","Usage catagory"])["Miles"].count().to_frame().reset_index().rename(columns={"Miles":"User"})
df_usage_cat_pivot=pd.pivot(df_usage_cat,index=["Product" ],columns="Usage catagory",values="User").fillna(0).reset_index()
df_usage_cat_pivot.columns.name=None

df_usage_cat_pivot

plots=sns.barplot(data=df_usage_cat,x="Usage catagory",y="User",hue="Product")
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.legend(loc=(0.75,0.75))
plt.show()

pd.crosstab(index=df_usage["Product"], columns=df_usage["Usage catagory"], margins=True)

"""the chance of buying kp781 by the people who use this machine for more the 5 days is (9/40=0.225)

the chance of buying kp281 by the people who use this machine for more the 3 days is (61/80=0.76)

"""

df_runing=df.copy()

def runing(row):
  if row["Miles"]<50:
    return "Irregular user"
  elif  row["Miles"]>=50 and row["Miles"]>=80:
    return "Modarate user"
  else:
    return "Regular user"

df_runing["Running catagory"]=df_runing.apply(runing,axis=1)

df_runing_cat=df_runing.groupby(["Product","Running catagory"])["Miles"].count().to_frame().reset_index().rename(columns={"Miles":"User"})
df_runing_cat_pivot=pd.pivot(df_runing_cat,index=["Product" ],columns="Running catagory",values="User").fillna(0).reset_index()
df_runing_cat_pivot.columns.name=None

df_runing_cat_pivot

plots=sns.barplot(data=df_runing_cat,x="Running catagory",y="User",hue="Product")
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.legend(loc=(0.75,0.75))
plt.show()

pd.crosstab(index=df_runing["Running catagory"], columns=df["Product"], margins=True)

"""person who use modately (running between 50 to 80 mile a week )to buy kp781 having an probability of(42/121=0.33)

person who use regularly (running more than 80 mile a week )to buy kp281 having an probability of(26/42=0.63)
"""

df_education=df.copy()
def education(row):
  if row["Education"]==0:
    return "illiterate user"
  elif row["Education"]<13:
    return "Under graduate user"
  elif row["Education"]<16:
    return "Graduate user"
  else:
    return "Scholer user"
df_education["education catagory"]=df_education.apply(education,axis=1)

df_education_cat=df_education.groupby(["Product","education catagory"])["Miles"].count().to_frame().reset_index().rename(columns={"Miles":"User"})
df_education_cat_pivot=pd.pivot(df_education_cat,index=["Product" ],columns="education catagory",values="User").fillna(0).reset_index()
df_education_cat_pivot.columns.name=None

df_education_cat_pivot

plots=sns.barplot(data=df_education_cat,x="education catagory",y="User",hue="Product")
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=10, xytext=(0, 5),
                   textcoords='offset points')
plt.legend(loc=(0.75,0.75))
plt.show()

pd.crosstab(index=df_education["education catagory"], columns=df_education["Product"], margins=True)

"""for a scoler person (education >16 years) to buy kp781 is (38/112=0.33)  & kp481 is (33/112=0.29) & kp281 is(41/112=0.37)

for a Graduate  person (education 13 to 16 years) to buy kp781 is (2/65=0.03)  & kp481 is (26/65=0.4) & kp281 is(37/65=0.56)

"""

sns.heatmap(data=df.corr(),annot=True)

df.corr()["Product"].sort_values(ascending=False).head(4)

"""product(kp781,kp481,kp281) are mostly correlated with income fitness and miles"""

sns.pairplot(df, hue ='Product')

"""##INSIGHTS##

1.	There are 57.78% male customer for the Aerofit
2.	There was higher probability(61/107=0.58) that a male customer whose material status is Partner to being a customer of Aerofit but there are equally likely case of women being the customer as the probality for womens material status is Partner is (46/107=0.42) womens material status is single(30/73=0.43)
3.	kp281 has the height market shear which is around 44.44%
4.	for kp281 middle age(30 to 50 age group people) user is heighest followed by adult aged people(18 to 30 age group people)
5.	for kp481 middle age(18 to 30 age group people) user is heighest followed by adult aged people(30 to 50 age group people)
6.	kp781 are most suited for the mid aged user(18 to 30 age group people)
7.	for teen (12 to 18 age group people) kp281 is the best one to buy
8.	The probabilaty of buying kp781 by mid age (30 to 50 age group people) is (30/119=.025)
9.	there are more number of material satus partner for all the catagory compair to single ones
10.	the probability of buying trade mill for material status partner is(107/180=0.59)
11.	the probability of material status partner to buy kp781 is (23/107=0.217)
12.	customer having high income(>75000$) are the most fited customer group for kp781
13.	customer having low income(<50000$) are the most fited customer group for kp281
14.	customer having midium income (50000to75000) are most suited for kp481
15.	the are higher probability of(83/180=0.46) low income(<50000$) people
16.	the chance of buying kp781 by higher income people is (21/40=0.525)
17.	for regular user (finess of group 3 to 4) kp281,and kp481 is best one
18.	for fitness feek(finess of group 4 to5) kp781 is the best one
19.	the probability of buying kp781 by fitnessfeek is (29/40=0.725)
20.	the probability of buying kp281 by regular user is (63/80=0.78) which is equally likly to the probability of buying kp281 by regular user is (47/60=0.78)
21.	the chance of buying kp781 by the people who use this machine for more the 5 days is (9/40=0.225)
22.	the chance of buying kp281 by the people who use this machine for more the 3 days is (61/80=0.76)
23.	person who use modately (running between 50 to 80 mile a week )to buy kp781 having an probability of(42/121=0.33)
24.	person who use regularly (running more than 80 mile a week )to buy kp281 having an probability of(26/42=0.63)

25.	for a scoler person (education >16 years) to buy kp781 is (38/112=0.33) & kp481 is (33/112=0.29) & kp281 is(41/112=0.37)
26.	for a Graduate person (education 13 to 16 years) to buy kp781 is (2/65=0.03) & kp481 is (26/65=0.4) & kp281 is(37/65=0.56)
27.	product(kp781,kp481,kp281) are mostly correlated with income fitness and miles

#RECOMANDATION

1. For a new costomer who having income more than 75000$ and usage more then 5 days and fitness concern recomand him kp781

2.  For a new costomer who having income lies between 75000$ to 50000$ and usage 3 to 5 days and midaged (18 to 30years) recomand him kp741

3.  For adult user age(30 to 50) recomand them kp781

4.  As the maket is in inflation so there might be a chance to cut down the income so reduce the inventory of kp781 

5.  Regular user who use the machine for 4 to 5 days and run 50 to 80 miles regularly use kp721, from the price point it is cheaper but there was a need of high performance so that the customer trust can be gain

6. As the mid age people are more in to the fitness industry so youtube influencial markating would be a great choice as the target audiances are same

7. For the scoler people recomand kp781

8.  For the partner male customer recomand kp721 as the probabilty of buying is higher(48/107=0.44)

9.  kp281 has the height market shear which is around 44.44% so there should be sufficient inventory needed so that delivared on time

10.  the chance of buying kp281 by the people who use this machine for more the 3 days  0.76 so for modarate use cases recomand kp281

11. for fitness feek kp781 is the best one to recomand

12. As the probability of buying kp741 is equally likely  to kp721 for that for the partner male customer recomand more kp741 instead of kp721
"""